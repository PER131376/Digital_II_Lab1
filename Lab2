/*UNIVERSIDAD DEL VALLE DE GUATEMALA
 * File:   main_02digital.c
 * Author: Selvin Estuardo Peralta Cifuentes
 *
 * Created on 22 de julio de 2021, 10:20 AM
 */
//Configuración PIC16F887
// CONFIG1
#pragma config FOSC = INTRC_NOCLKOUT// Oscillator Selection bits (RCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, RC on RA7/OSC1/CLKIN)
#pragma config WDTE = OFF       // Watchdog Timer Enable bit (WDT disabled and can be enabled by SWDTEN bit of the WDTCON register)
#pragma config PWRTE = OFF      // Power-up Timer Enable bit (PWRT disabled)
#pragma config MCLRE = OFF      // RE3/MCLR pin function select bit (RE3/MCLR pin function is digital input, MCLR internally tied to VDD)
#pragma config CP = OFF         // Code Protection bit (Program memory code protection is disabled)
#pragma config CPD = OFF        // Data Code Protection bit (Data memory code protection is disabled)
#pragma config BOREN = OFF      // Brown Out Reset Selection bits (BOR disabled)
#pragma config IESO = OFF       // Internal External Switchover bit (Internal/External Switchover mode is disabled)
#pragma config FCMEN = OFF      // Fail-Safe Clock Monitor Enabled bit (Fail-Safe Clock Monitor is disabled)
#pragma config LVP = OFF        // Low Voltage Programming Enable bit (RB3 pin has digital I/O, HV on MCLR must be used for programming)
// CONFIG2
#pragma config BOR4V = BOR40V   // Brown-out Reset Selection bit (Brown-out Reset set to 4.0V)
#pragma config WRT = OFF        // Flash Progra
//****DirectivasCompliador*****//
#define _XTAL_FREQ 4000000
//*****IMPORTACION DE LIBRERIAS******
#include <xc.h>
#include <stdint.h>
#include <stdio.h>
#include <pic16f887.h>
#include "ADC.h"      //Importar libreria creada para ADC
#include "LCD.h"
#include "UART.h"
#include <string.h>

//-------Declaración variables-----------
uint8_t cont = 0;       
int Pot1;
int Pot2;
float Sen1;
float Sen2;
int Sen3;
char s[20];
//***********Prototipos de funciones************
void setup(void);           /*funcion principal */
void Sensores(void);
//**************Interrupciones**************
void __interrupt()isr(void) /*interrupciones*/
{
    Recib_ADC();   //Funcion de libreria_Reibe valores del Adresh
    
}
//***************************funcionPrincipal*****************
void main(void) {
    setup();                /*funcion de configuracion principal*/
    //Menuypreguntas();       //menu
    __delay_us(50);
    ADCON0bits.GO = 1;
    unsigned int a;
    Lcd_Init();
    //***********************LoopPrincipal**********************
    while(1){
        Sen1 = (Pot1*0.0196);
        Sen2 = (Pot2*0.0196);
        Sen3 = cont;
        sprintf(s, "%.2f", Sen1);
        Lcd_Set_Cursor(1,2);
        Lcd_Write_String("S1");
        Lcd_Set_Cursor(1,8);
        Lcd_Write_String("S2");
        Lcd_Set_Cursor(1,14);
        Lcd_Write_String("S3");
        Lcd_Set_Cursor(2,1);
        Lcd_Write_String(s);

        sprintf(s, "%.2f", Sen2);
        Lcd_Set_Cursor(2,7);
        Lcd_Write_String(s);
        
        
        sprintf(s, "%d", Sen3);
        Lcd_Set_Cursor(2,15);
        Lcd_Write_String(s);
        __delay_ms(80);

        Sensores();       //Funcion de 
        Stard_ADC();     //Funcion de libreria da inicio a la conversión ADC
        void Sent_caracter(char caracter);
        void Cadena_caracteres(char st[]);
        
         if(PIR1bits.RCIF){
            char op = RCREG;
            if(op == 43){
                cont++;
            }
            if(op == 45){
                cont--;
            }
        }
    }
}
//*****************ConfiguracionesGenerales************************
void setup(void){ 
    //*******configuración io entradas y salidas****
    ANSEL = 0b01100000;
    ANSELH = 0x00;     //Salidas Digitales
    
    TRISE = 0x03; 
    TRISA = 0x00;
    TRISB = 0x00;
    TRISD = 0x00;
    
    PORTA = 0x00; 
    PORTE = 0x00;

    //configuración del reloj (oscilador interno)
    OSCCONbits. IRCF2 = 1; 
    OSCCONbits. IRCF1 = 1;
    OSCCONbits. IRCF0 = 0;  //4Mhz
    OSCCONbits. SCS = 1;

    //CONFIGURACIOS ADC
    ADCON1bits.ADFM = 0;        //justificado a la izquierda 
    ADCON1bits.VCFG0 = 0;       //Voltaje VDD referencia
    ADCON1bits.VCFG1 = 0;       //Voltaje Vss referencia
    
    ADCON0bits.ADCS = 1;        //ADC Clock FOSC = 4Mhz/8
    ADCON0bits.CHS = 5;         //Canal 5
    __delay_us(100);
    ADCON0bits.ADON = 1;        //Habiliar Modulo de ADC
    //ConfiguraciónUART TX Y RX
    //configuracionUART();
    TXSTAbits.SYNC = 0;             //Modo asíncrono
    TXSTAbits.BRGH = 1;             //Seleccion BAUD RATE
    BAUDCTLbits.BRG16 = 0; 
    
    SPBRG = 25;                     //Registros para valor BAUD RATE
    SPBRGH = 0; 
    
    RCSTAbits.SPEN = 1;         //Habilitar puerto serial asíncrono
    RCSTAbits.RX9 = 0;
    RCSTAbits.CREN = 1;         //Habilitar recepción de datos 

    TXSTAbits.TXEN = 1;         //Habilitar transmision
    //configuración interrupción
    INTCONbits. GIE = 1;        //Globales
    INTCONbits. RBIE = 1;       //IOCB
    INTCONbits. RBIF = 0;
    INTCONbits.PEIE = 1;        //Perifericas
    PIE1bits.ADIE = 1;          //ADC
    PIR1bits.ADIF = 0;      
}



